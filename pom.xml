<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.3.0.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.sckroll</groupId>
	<artifactId>sckrollagile</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>SckrollAgile</name>
	<description>Sckroll's kanban board project with Vue.js and Spring Boot</description>

	<properties>
		<java.version>1.10</java.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-lang3</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-security</artifactId>
    </dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.h2database</groupId>
      <artifactId>h2</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework.security</groupId>
      <artifactId>spring-security-test</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.hibernate.validator</groupId>
      <artifactId>hibernate-validator</artifactId>
      <version>6.1.5.Final</version>
    </dependency>
    <dependency>
      <groupId>javax.validation</groupId>
      <artifactId>validation-api</artifactId>
      <version>2.0.1.Final</version>
    </dependency>
    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
      <version>2.6</version>
    </dependency>

 </dependencies>

	<build>
		<plugins>
      <!-- 메이븐 단위 테스트(surefire) 플러그인은 기본 30초가 넘으면 테스트 중단 & 에러 -->
      <!-- 따라서 forkedProcessExitTimeoutInSeconds의 값을 30(초) 이상으로 설정 -->
      <!-- 혹은 아래 플러그인 부분을 삭제하고 콘솔 출력 내용을 로그 파일로 추출하는 방법 사용 가능 -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.0.0-M5</version>
        <configuration>
          <forkedProcessExitTimeoutInSeconds>60</forkedProcessExitTimeoutInSeconds>
        </configuration>
      </plugin>

      <!-- 스프링 부트를 시작하고 종료하는 부분 설정 -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>pre integration test</id>
            <goals>
              <goal>start</goal>
            </goals>
          </execution>

          <execution>
            <id>post integration test</id>
            <goals>
              <goal>stop</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- npm 명령어 실행 플러그인 -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>1.6.0</version>
        <executions>
          <!-- npm 설치 -->
          <execution>
            <id>front-end install</id>
            <goals>
              <goal>exec</goal>
            </goals>
            <phase>prepare-package</phase>
            <configuration>
              <executable>npm</executable>
              <arguments>
                <argument>install</argument>
              </arguments>
            </configuration>
          </execution>

          <!-- 프론트엔드 단위 테스트 -->
          <execution>
            <id>front-end unit test</id>
            <goals>
              <goal>exec</goal>
            </goals>
            <phase>prepare-package</phase>
            <configuration>
              <executable>npm</executable>
              <arguments>
                <argument>run</argument>
                <argument>test:unit</argument>
              </arguments>
            </configuration>
          </execution>

          <!-- 프론트엔드 빌드 -->
          <execution>
            <id>front-end build package</id>
            <goals>
              <goal>exec</goal>
            </goals>
            <phase>prepare-package</phase>
            <configuration>
              <executable>npm</executable>
              <arguments>
                <argument>run</argument>
                <argument>build</argument>
              </arguments>
            </configuration>
          </execution>

          <!-- 프론트엔드 E2E 테스트 -->
          <!-- Integration-test 페이즈에서 실행 -->
          <execution>
            <id>front-end e2e test</id>
            <goals>
              <goal>exec</goal>
            </goals>
            <phase>integration-test</phase>
            <configuration>
              <executable>npm</executable>
              <arguments>
                <argument>run</argument>
                <argument>test:e2e</argument>
              </arguments>
            </configuration>
          </execution>
        </executions>
        <configuration>
          <workingDirectory>${basedir}/front-end</workingDirectory>
        </configuration>
      </plugin>

      <!-- 프론트엔드 리소스를 복사하는 플러그인 -->
      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <version>3.1.0</version>
        <executions>
          <!-- HTML 템플릿 파일을 template 디렉토리에 복사 -->
          <execution>
            <id>copy front-end template</id>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <phase>prepare-package</phase>
            <configuration>
              <outputDirectory>${basedir}/src/main/resources/templates</outputDirectory>
              <resources>
                <resource>
                  <directory>front-end/dist</directory>
                  <includes>
                    <include>index.html</include>
                  </includes>
                </resource>
              </resources>
            </configuration>
          </execution>

          <!-- HTML 템플릿 외의 정적 에셋을 static 디렉토리에 복사 -->
          <execution>
            <id>copy front-end static assets</id>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <phase>prepare-package</phase>
            <configuration>
              <outputDirectory>${basedir}/src/main/resources/static</outputDirectory>
              <resources>
                <resource>
                  <directory>front-end/dist</directory>
                  <excludes>
                    <exclude>index.html</exclude>
                  </excludes>
                </resource>
              </resources>
            </configuration>
          </execution>

          <!-- 목적지 디렉토리(/target)에 템플릿 파일 복사 -->
          <!-- 복사 후 src/main/resources 디렉토리는 더는 사용하지 않음 -->
          <execution>
            <id>copy front-end template to target</id>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <phase>prepare-package</phase>
            <configuration>
              <outputDirectory>${basedir}/target/classes/templates</outputDirectory>
              <resources>
                <resource>
                  <directory>front-end/dist</directory>
                  <excludes>
                    <exclude>index.html</exclude>
                  </excludes>
                </resource>
              </resources>
            </configuration>
          </execution>

          <!-- 목적지 디렉토리(/target)에 정적 에셋 복사 -->
          <!-- 복사 후 src/main/resources 디렉토리는 더는 사용하지 않음 -->
          <execution>
            <id>copy front-end assets to target</id>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <phase>prepare-package</phase>
            <configuration>
              <outputDirectory>${basedir}/target/classes/static</outputDirectory>
              <resources>
                <resource>
                  <directory>front-end/dist</directory>
                  <excludes>
                    <exclude>index.html</exclude>
                  </excludes>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- 기본 라이프 사이클 시작 전에 src/main/resources의 에셋을 깨끗이 제거하는 플러그인 -->
      <!-- mvn clean 또는 mvn clean install 명령어로 실행 가능 -->
      <plugin>
        <artifactId>maven-clean-plugin</artifactId>
        <version>3.1.0</version>
        <configuration>
          <filesets>
            <fileset>
              <directory>${basedir}/src/main/resources/static/static</directory>
            </fileset>
            <fileset>
              <directory>${basedir}/src/main/resources/templates</directory>
              <includes>
                <include>index.html</include>
              </includes>
            </fileset>
          </filesets>
        </configuration>
      </plugin>
		</plugins>
	</build>

</project>
